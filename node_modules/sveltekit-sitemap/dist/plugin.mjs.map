{"version":3,"sources":["../src/plugin.ts"],"sourcesContent":["import fs from \"fs\";\nimport type { ViteDevServer } from \"vite\";\nimport { Sitemap, SitemapPluginParams } from \"./types\";\n\n// function to recursively traverse a directory and return if some of the files are named +page.svelte\nconst hasPageInside = (path: string): boolean => {\n  const files = fs.readdirSync(path);\n  if (files.some((file) => file === \"+page.svelte\")) return true;\n  return files.some((file: string) => {\n    const newPath = path + \"/\" + file;\n    if (fs.statSync(newPath).isDirectory()) {\n      return hasPageInside(newPath);\n    } else {\n      return false;\n    }\n  });\n};\n\nconst getRoutes = (dir: string): Sitemap => {\n  let routes: Sitemap = {};\n  const traverseRoutes = (path: string) => {\n    const isDirectory = fs.statSync(path).isDirectory();\n    const isPageFolder = isDirectory && hasPageInside(path);\n    if (isDirectory && isPageFolder) {\n      fs.readdirSync(path).forEach((file) => traverseRoutes(path + \"/\" + file));\n    }\n\n    const id = path.replace(dir, \"\").replace(\"/+page.svelte\", \"\");\n\n    const dirBase = path.replace(\"/+page.svelte\", \"\");\n\n    const isFolder =\n      fs.statSync(dirBase).isDirectory() &&\n      fs.readdirSync(path.replace(\"/+page.svelte\", \"\")).some((p) => {\n        return fs.statSync(dirBase + \"/\" + p).isDirectory();\n      });\n    if (!path.endsWith(\"+page.svelte\") && !isFolder) return;\n\n    Object.assign(routes, { [id || \"/\"]: isFolder });\n  };\n  fs.readdirSync(dir).forEach((file) => traverseRoutes(dir + \"/\" + file));\n\n  return routes;\n};\n\nexport const sitemapPlugin = ({\n  routesDir = \"./src/routes\",\n  sitemapFile = \"./src/sitemap.ts\"\n}: SitemapPluginParams = {}) => {\n  function updateSitemap() {\n    fs.writeFileSync(\n      sitemapFile,\n      `import type { RO_Sitemap } from 'sveltekit-sitemap';\n\nexport const sitemap = (<const>${JSON.stringify(getRoutes(routesDir), null, 3).replace(\n        /\\uFFFF/g,\n        '\\\\\"'\n      )}) satisfies RO_Sitemap\n\nexport type Sitemap = typeof sitemap\n`\n    );\n  }\n  updateSitemap();\n\n  return {\n    name: \"sveltekit-sitemap\",\n    configureServer(server: ViteDevServer) {\n      server.watcher\n        .add([routesDir])\n        .on(\"add\", updateSitemap)\n        .on(\"unlink\", updateSitemap)\n        .on(\"unlinkDir\", updateSitemap);\n    }\n  };\n};\n"],"mappings":"6BAAA,OAAOA,MAAQ,KAKf,IAAMC,EAAiBC,GAA0B,CAC/C,IAAMC,EAAQH,EAAG,YAAYE,CAAI,EACjC,OAAIC,EAAM,KAAMC,GAASA,IAAS,cAAc,EAAU,GACnDD,EAAM,KAAMC,GAAiB,CAClC,IAAMC,EAAUH,EAAO,IAAME,EAC7B,OAAIJ,EAAG,SAASK,CAAO,EAAE,YAAY,EAC5BJ,EAAcI,CAAO,EAErB,EAEX,CAAC,CACH,EAEMC,EAAaC,GAAyB,CAC1C,IAAIC,EAAkB,CAAC,EACjBC,EAAkBP,GAAiB,CACvC,IAAMQ,EAAcV,EAAG,SAASE,CAAI,EAAE,YAAY,EAC5CS,EAAeD,GAAeT,EAAcC,CAAI,EAClDQ,GAAeC,GACjBX,EAAG,YAAYE,CAAI,EAAE,QAASE,GAASK,EAAeP,EAAO,IAAME,CAAI,CAAC,EAG1E,IAAMQ,EAAKV,EAAK,QAAQK,EAAK,EAAE,EAAE,QAAQ,gBAAiB,EAAE,EAEtDM,EAAUX,EAAK,QAAQ,gBAAiB,EAAE,EAE1CY,EACJd,EAAG,SAASa,CAAO,EAAE,YAAY,GACjCb,EAAG,YAAYE,EAAK,QAAQ,gBAAiB,EAAE,CAAC,EAAE,KAAMa,GAC/Cf,EAAG,SAASa,EAAU,IAAME,CAAC,EAAE,YAAY,CACnD,EACC,CAACb,EAAK,SAAS,cAAc,GAAK,CAACY,GAEvC,OAAO,OAAON,EAAQ,CAAE,CAACI,GAAM,KAAME,CAAS,CAAC,CACjD,EACA,OAAAd,EAAG,YAAYO,CAAG,EAAE,QAASH,GAASK,EAAeF,EAAM,IAAMH,CAAI,CAAC,EAE/DI,CACT,EAEaQ,EAAgB,CAAC,CAC5B,UAAAC,EAAY,eACZ,YAAAC,EAAc,kBAChB,EAAyB,CAAC,IAAM,CAC9B,SAASC,GAAgB,CACvBnB,EAAG,cACDkB,EACA;AAAA;AAAA,iCAE2B,KAAK,UAAUZ,EAAUW,CAAS,EAAG,KAAM,CAAC,EAAE,QACvE,UACA,KACF;AAAA;AAAA;AAAA,CAIF,CACF,CACA,OAAAE,EAAc,EAEP,CACL,KAAM,oBACN,gBAAgBC,EAAuB,CACrCA,EAAO,QACJ,IAAI,CAACH,CAAS,CAAC,EACf,GAAG,MAAOE,CAAa,EACvB,GAAG,SAAUA,CAAa,EAC1B,GAAG,YAAaA,CAAa,CAClC,CACF,CACF","names":["fs","hasPageInside","path","files","file","newPath","getRoutes","dir","routes","traverseRoutes","isDirectory","isPageFolder","id","dirBase","isFolder","p","sitemapPlugin","routesDir","sitemapFile","updateSitemap","server"]}