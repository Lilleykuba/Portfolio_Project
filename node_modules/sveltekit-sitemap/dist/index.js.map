{"version":3,"sources":["../../node_modules/.pnpm/@sveltejs+kit@1.0.1_svelte@3.55.0+vite@4.0.3/node_modules/@sveltejs/kit/src/exports/index.js","../src/utils.ts","../src/hook.ts"],"names":["json","data","init","headers","__spreadProps","__spreadValues","encodeXML","str","generateSitemap","definitions","baseUrl","sitemap","toJson","routes","acc","route","RouteDefinition","definition","r","d","_a","_b","path","priority","changeFreq","image","lastMod","generateRobots","robots","agentsToRender","parseAgent","agent","infos","allow","a","crawlDelay","disallow","sitemapHook","params","_0","__async","event","resolve","routeDefinitions","generatedSitemap"],"mappings":"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","sourcesContent":["import { HttpError, Redirect, ActionFailure } from '../runtime/control.js';\nimport { BROWSER, DEV } from 'esm-env';\n\n// For some reason we need to type the params as well here,\n// JSdoc doesn't seem to like @type with function overloads\n/**\n * @type {import('@sveltejs/kit').error}\n * @param {number} status\n * @param {any} message\n */\nexport function error(status, message) {\n\tif ((!BROWSER || DEV) && (isNaN(status) || status < 400 || status > 599)) {\n\t\tthrow new Error(`HTTP error status codes must be between 400 and 599 â€” ${status} is invalid`);\n\t}\n\n\treturn new HttpError(status, message);\n}\n\n/** @type {import('@sveltejs/kit').redirect} */\nexport function redirect(status, location) {\n\tif ((!BROWSER || DEV) && (isNaN(status) || status < 300 || status > 308)) {\n\t\tthrow new Error('Invalid status code');\n\t}\n\n\treturn new Redirect(status, location);\n}\n\n/** @type {import('@sveltejs/kit').json} */\nexport function json(data, init) {\n\t// TODO deprecate this in favour of `Response.json` when it's\n\t// more widely supported\n\tconst headers = new Headers(init?.headers);\n\tif (!headers.has('content-type')) {\n\t\theaders.set('content-type', 'application/json');\n\t}\n\n\treturn new Response(JSON.stringify(data), {\n\t\t...init,\n\t\theaders\n\t});\n}\n\n/**\n * Generates an `ActionFailure` object.\n * @param {number} status\n * @param {Record<string, any> | undefined} [data]\n */\nexport function fail(status, data) {\n\treturn new ActionFailure(status, data);\n}\n\n// TODO remove for 1.0\nexport function invalid() {\n\tthrow new Error('invalid(...) is now fail(...)');\n}\n","import { RO_Sitemap, RouteDefinitions, RouteDefinition, Sitemap, UserAgentDirective } from \"./types\";\n\nexport const encodeXML = (str: string) => {\n  return str\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&apos;\");\n};\n\nexport const generateSitemap = <S extends RO_Sitemap, J extends boolean>(\n  definitions: RouteDefinitions<S>,\n  baseUrl: string,\n  sitemap: S,\n  toJson?: J\n): object[] | string => {\n  // Instantiate a routes object with all the static routes\n  // The will be override if you pass custom settings\n  const routes: Record<string, RouteDefinition<boolean>> = Object.keys(sitemap).reduce((acc, route) => {\n    const isDynamic = route.includes(\"[\");\n    if (!isDynamic && definitions[route as keyof typeof definitions] !== false) {\n      Object.assign(acc, {\n        [route]: { path: route, priority: route === \"/\" ? \"1.0\" : \"0.7\" } as RouteDefinition<boolean>\n      });\n    }\n    return acc;\n  }, {});\n\n  // Add custom route data to the routes object\n  Object.entries(sitemap).forEach(([route]) => {\n    const RouteDefinition = definitions[route as keyof typeof definitions];\n    if (RouteDefinition) {\n      if (Array.isArray(RouteDefinition)) {\n        RouteDefinition.forEach((definition) => {\n          if (definition) {\n            Object.assign(routes, { [definition.path]: definition });\n          }\n        });\n      } else {\n        Object.assign(routes, { [RouteDefinition?.path || route]: RouteDefinition });\n      }\n    }\n  });\n\n  if (toJson === true) {\n    return Object.entries(routes) as object[];\n  }\n  // Build and return sitemap\n  // refs : https://github.com/sveltejs/kit/issues/1142#issuecomment-1032407693 https://github.com/Shopify/hydrogen/blob/1de3864214d04d9214e323d7f0a953c7b9309b7b/templates/demo-store/src/routes/sitemap.xml.server.ts\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\"\nxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\nxmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"\nxmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"\nxmlns:news=\"http://www.google.com/schemas/sitemap-news/0.9\"\nxmlns:mobile=\"http://www.google.com/schemas/sitemap-mobile/1.0\"\nxmlns:pagemap=\"http://www.google.com/schemas/sitemap-pagemap/1.0\"\nxmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n${Object.entries(routes)\n\n  .map(([r, d]) => {\n    if (!d) return \"\";\n    const { path, priority, changeFreq, image, lastMod } = d;\n    return `  <url>\n    <loc>${baseUrl}${path || r}</loc>\n  </url>\n  ${lastMod ? `<lastmod>${lastMod}</lastmod>` : \"\"}\n  ${priority ? `<priority>${priority}</priority>` : \"\"}\n  ${changeFreq ? `<changefreq>${changeFreq}</changefreq>` : \"\"}\n  ${\n    image\n      ? `\n    <image:image>\n      <image:loc>${encodeXML(image.url)}</image:loc>\n      <image:title>${encodeXML(image.title ?? \" \")}</image:title>\n      <image:caption>${encodeXML(image.altText ?? \" \")}</image:caption>\n    </image:image>`\n      : \"\"\n  }`;\n  })\n  .join(\"\\n\")}\n</urlset>`;\n};\n\nexport const generateRobots = <S extends RO_Sitemap>(\n  robots: boolean | UserAgentDirective<S> | UserAgentDirective<S>[],\n  baseUrl: string\n) => {\n  // Instantiate the agents to render array\n  const agentsToRender: { agent: string; crawlDelay?: number; allow: string[]; disallow: string[] }[] = [];\n\n  const parseAgent = (agent: UserAgentDirective<S>) => {\n    const infos = Object.entries(agent.paths).reduce<{ allow: string[]; disallow: string[] }>(\n      (acc, [route, allow]) => {\n        if (allow) {\n          acc.allow.push(route);\n        } else {\n          acc.disallow.push(route);\n        }\n        return acc;\n      },\n      { allow: [], disallow: [] }\n    );\n\n    // Use the same config for all the user agents\n    if (Array.isArray(agent.userAgent)) {\n      agent.userAgent.forEach((a) => {\n        agentsToRender.push({\n          agent: a,\n          crawlDelay: agent.crawlDelay,\n          ...infos\n        });\n      });\n    } else {\n      agentsToRender.push({\n        agent: agent.userAgent || \"*\",\n        crawlDelay: agent.crawlDelay,\n        ...infos\n      });\n    }\n  };\n\n  // Build a default robot.txt for all user-agents\n  if (typeof robots === \"boolean\") {\n    agentsToRender.push({\n      agent: \"*\",\n      allow: robots === true ? [\"/\"] : [],\n      disallow: robots === false ? [\"/\"] : []\n    });\n  } else if (!Array.isArray(robots)) {\n    parseAgent(robots);\n  } else {\n    robots.forEach(parseAgent);\n  }\n\n  return `${agentsToRender\n    .map(({ agent, crawlDelay, allow, disallow }) =>\n      `User-agent: ${agent}\nSitemap: ${baseUrl}/sitemap.xml\n${crawlDelay ? `Crawl-delay: ${crawlDelay}` : \"\"}\n${allow.map((route) => `Allow: ${route}`).join(\"\\n\")}\n${disallow.map((route) => `Disallow: ${route}`).join(\"\\n\")}\n`\n        // Make it pretty\n        .replace(/\\n\\n/g, \"\\n\")\n        .replace(/\\n\\n/g, \"\\n\")\n    )\n    .join(\"\\n\")}\n`.trim();\n};\n","import { Handle, json } from \"@sveltejs/kit\";\nimport type { SitemapParams, RO_Sitemap } from \"./types\";\nimport { generateRobots, generateSitemap } from \"./utils\";\n\nexport const sitemapHook =\n  <S extends RO_Sitemap>(sitemap: S, params: SitemapParams<S> | undefined = {}): Handle =>\n  async ({ event, resolve }) => {\n    if (event.url.pathname === \"/sitemap.xml\") {\n      // Get dynamic custom definition for app routes\n      const routeDefinitions = params.getRoutes ? await params.getRoutes(event) : {};\n      const toJson = event.url.searchParams.get(\"format\") === \"json\";\n      const generatedSitemap = generateSitemap(routeDefinitions, event.url.origin, sitemap, toJson);\n      if (toJson) {\n        return json(generatedSitemap);\n      }\n      return new Response(generatedSitemap as string, {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/xml\"\n        }\n      });\n    }\n\n    if (event.url.pathname === \"/robots.txt\") {\n      // Get dynamic robots directives\n      const robots = params.getRobots ? await params.getRobots(event) : true;\n\n      // Build and return the robots.txt\n      return new Response(generateRobots<S>(robots, event.url.origin), {\n        headers: {\n          \"content-type\": \"text/plain\",\n          // Cache it for 24 hours\n          \"cache-control\": `max-age=${60 * 60 * 24}`\n        }\n      });\n    }\n\n    return resolve(event);\n  };\n"]}